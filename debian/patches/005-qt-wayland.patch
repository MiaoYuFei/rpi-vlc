--- a/modules/gui/qt/components/interface_widgets.cpp
+++ b/modules/gui/qt/components/interface_widgets.cpp
@@ -110,6 +110,44 @@ void VideoWidget::sync( void )
 #endif
 }
 
+static inline void incnz(unsigned int * px)
+{
+    if ( ++*px == 0 )
+        *px = 1;
+}
+
+/**
+ * The wayland surface may change if the window is hidden which
+ * seems to happen sometimes on resize
+ * In Qt it looks like this happens if the window is hidden
+ **/
+void VideoWidget::refreshHandle()
+{
+#ifdef QT5_HAS_WAYLAND
+    if (!p_window || p_window->type != VOUT_WINDOW_TYPE_WAYLAND)
+        return;
+
+    QWindow *window = stable->windowHandle();
+    assert(window != NULL);
+    window->create();
+
+    QPlatformNativeInterface *qni = qApp->platformNativeInterface();
+    assert(qni != NULL);
+
+    struct wl_surface * const new_surface = static_cast<wl_surface*>(
+        qni->nativeResourceForWindow(QByteArrayLiteral("surface"),
+                                     window));
+
+    if ( p_window->handle.wl != new_surface )
+    {
+        vlc_mutex_lock(&p_window->handle_lock);
+        p_window->handle.wl = new_surface;
+        incnz(&p_window->handle_seq);
+        vlc_mutex_unlock(&p_window->handle_lock);
+    }
+#endif
+}
+
 /**
  * Request the video to avoid the conflicts
  **/
@@ -180,6 +218,7 @@ bool VideoWidget::request( struct vout_w
                                              window));
             p_wnd->display.wl = static_cast<wl_display*>(
                 qni->nativeResourceForIntegration(QByteArrayLiteral("wl_display")));
+            p_wnd->handle_seq = 1;
             break;
         }
 #endif
@@ -238,6 +277,8 @@ void VideoWidget::reportSize()
     if( !p_window )
         return;
 
+    refreshHandle();
+
     QSize size = physicalSize();
     WindowResized(p_window, size);
 }
@@ -293,6 +334,27 @@ bool VideoWidget::nativeEvent( const QBy
     return false;
 }
 
+void VideoWidget::showEvent(QShowEvent *event)
+{
+    QFrame::showEvent(event);
+
+    if (p_window && p_window->type == VOUT_WINDOW_TYPE_WAYLAND && p_window->handle.wl == NULL)
+        refreshHandle();
+}
+
+void VideoWidget::hideEvent(QHideEvent *event)
+{
+    if (p_window && p_window->type == VOUT_WINDOW_TYPE_WAYLAND && p_window->handle.wl != NULL)
+    {
+        vlc_mutex_lock(&p_window->handle_lock);
+        p_window->handle.wl = NULL;
+        incnz(&p_window->handle_seq);
+        vlc_mutex_unlock(&p_window->handle_lock);
+    }
+
+    QFrame::hideEvent(event);
+}
+
 void VideoWidget::resizeEvent( QResizeEvent *event )
 {
     QWidget::resizeEvent( event );
--- a/modules/gui/qt/components/interface_widgets.hpp
+++ b/modules/gui/qt/components/interface_widgets.hpp
@@ -69,6 +69,8 @@ protected:
         return NULL;
     }
 
+    void hideEvent(QHideEvent *event) Q_DECL_OVERRIDE;
+    void showEvent(QShowEvent *event) Q_DECL_OVERRIDE;
     bool nativeEvent(const QByteArray &eventType, void *message, long *result) Q_DECL_OVERRIDE;
     virtual void resizeEvent(QResizeEvent *) Q_DECL_OVERRIDE;
     void mousePressEvent(QMouseEvent *) Q_DECL_OVERRIDE;
@@ -88,6 +90,7 @@ private:
     bool enable_mouse_events;
 
     void reportSize();
+    void refreshHandle();
 
 signals:
     void sizeChanged( int, int );
